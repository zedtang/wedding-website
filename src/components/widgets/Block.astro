---
import { Icon } from 'astro-icon/components';
import { Picture } from '@astrojs/image/components';

interface SimpleButton {
  text?: string;
  target?: string;
  rel?: string;
  icon?: string;
  enabled?: boolean;
  isAddToCalendar?: boolean;
  calendarOptions?: string;
  name?: string;
  startDate?: string;
  endDate?: string;
  startTime?: string;
  endTime?: string;
  location?: string;
  timeZone?: string;
}

interface CallToAction {
  text?: string;
  href?: string;
  target?: string;
  rel?: string;
  icon?: string;
  enabled?: boolean;
}

export interface Props {
  enabled?: boolean;
  title?: any;
  subtitle?: any;
  highlight?: any;
  backgroundCss?: any;
  content?: any;
  simpleButton?: any | SimpleButton;
  callToAction?: any | CallToAction;
  callToAction2?: any | CallToAction;
  image?: string | any; // TODO: find HTMLElementProps
}

const {
  enabled,
  backgroundCss,
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  highlight,
  content = await Astro.slots.render('content'),
  simpleButton = await Astro.slots.render('simpleButton'),
  callToAction = await Astro.slots.render('callToAction'),
  callToAction2 = await Astro.slots.render('callToAction2'),
  image = await Astro.slots.render('image'),
} = Astro.props;

var backgroundStyle = '';
if (backgroundCss === '' || backgroundCss) {
  backgroundStyle = backgroundCss;
} else {
  backgroundStyle = 'bg-sage-50 dark:bg-slate-800';
}
---

{
  enabled === true && (
    <section class:list={`${backgroundStyle} px-10 py-10`}>
      <div class="max-w-xl sm:mx-auto lg:max-w-2xl">
        {(title || subtitle || highlight || content) && (
          <div class="md:mx-auto text-center max-w-3xl">
            {highlight && (
              <p
                class="text-base text-primary dark:text-sage-200 font-semibold tracking-wide uppercase"
                set:html={highlight}
              />
            )}
            {title && (
              <h2
                class="text-4xl md:text-5xl font-bold leading-tighter tracking-tighter mb-4 font-heading"
                set:html={title}
              />
            )}

            {subtitle && (
              <p
                class="max-w-3xl mx-auto sm:text-center text-xl text-muted dark:text-slate-400 mb-4"
                set:html={subtitle}
              />
            )}

            {content && (
              <p
                class="lg:mb-0 md:mb-0 mb-8 max-w-3xl mx-auto sm:text-center text-xl text-muted dark:text-slate-400"
                set:html={content}
              />
            )}
            <div>
              {image && image.enabled && (
                <div class="relative m-auto max-w-5xl mt-6 mb-6">
                  {typeof image === 'string' ? (
                    <Fragment set:html={image} />
                  ) : (
                    <Picture
                      class="mx-auto rounded-md w-full"
                      widths={[400, 768, 1024, 2040]}
                      sizes="(max-width: 767px) 400px, (max-width: 1023px) 768px, (max-width: 2039px) 1024px, 2040px"
                      aspectRatio={1024 / 576}
                      loading="eager"
                      width={1024}
                      height={576}
                      {...image}
                    />
                  )}
                </div>
              )}
            </div>
            <div class="max-w-3xl mx-auto">
              <div class="max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4">
                {simpleButton && simpleButton.enabled && (
                  <div class="sm:mt-0 md:mt-6 flex w-full sm:w-auto">
                    {simpleButton.isAddToCalendar ? (
                      <button id="add-to-calendar-button" class="btn btn-primary sm:mb-0 w-full">
                        {simpleButton?.icon && (
                          <>
                            <Icon name={simpleButton.icon} class="w-5 h-5 mr-1 -ml-1.5" />
                          </>
                        )}
                        {simpleButton?.text}
                      </button>
                    ) : (
                      <a
                        class="btn btn-primary sm:mb-0 w-full"
                        target={simpleButton?.target}
                        rel={simpleButton?.rel}
                      >
                        {simpleButton?.icon && (
                          <>
                            <Icon name={simpleButton.icon} class="w-5 h-5 mr-1 -ml-1.5" />
                          </>
                        )}
                        {simpleButton?.text}
                      </a>
                    )}
                  </div>
                )}
                {callToAction && callToAction.enabled && (
                  <div class="sm:mt-0 md:mt-6 flex w-full sm:w-auto">
                    {typeof callToAction === 'string' ? (
                      <Fragment set:html={callToAction} />
                    ) : (
                      <a
                        class="btn btn-primary sm:mb-0 w-full"
                        href={callToAction?.href}
                        target={callToAction?.target}
                        rel={callToAction?.rel}
                      >
                        {callToAction?.icon && (
                          <>
                            <Icon name={callToAction.icon} class="w-5 h-5 mr-1 -ml-1.5" />
                          </>
                        )}
                        {callToAction?.text}
                      </a>
                    )}
                  </div>
                )}
                {callToAction2 && callToAction2.enabled === true && (
                  <div class="sm:mt-0 md:mt-6 flex w-full sm:w-auto">
                    {typeof callToAction2 === 'string' ? (
                      <Fragment set:html={callToAction2} />
                    ) : (
                      <a
                        class="btn w-full"
                        href={callToAction2?.href}
                        target={callToAction2?.target}
                        rel={callToAction2?.rel}
                      >
                        {callToAction2?.icon && (
                          <>
                            <Icon name={callToAction2.icon} class="w-5 h-5 mr-1 -ml-1.5" />
                          </>
                        )}
                        {callToAction2.text}
                      </a>
                    )}
                  </div>
                )}
              </div>
            </div>
          </div>
        )}
      </div>
    </section>
  )
}

<script>
  // Ensure this script runs after the DOM is fully loaded
  document.addEventListener('DOMContentLoaded', () => {
    const config = {
      name: "Jiaheng and Flora's Wedding",
      description: "Join us for the wedding ceremony of Jiaheng and Flora.",
      startDate: '2024-10-03',
      endDate: '2024-10-03',
      startTime: '15:30',
      endTime: '22:00',
      timeZone: 'America/Los_Angeles',
      calendarOptions: "'Apple','Google'",
      location: 'Grand Island Mansion 13415 Grand Island Rd, Walnut Grove, CA 95690, United States',
      iCalFileName: "Jiaheng and Flora's Wedding",
    };
    const button = document.getElementById('add-to-calendar-button');
    if (button) {
      button.addEventListener('click', () => atcb_action(config, button));
    }
  });
</script>
